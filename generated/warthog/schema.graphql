interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Hello {
  greeting: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  swaps(offset: Int, limit: Int = 50, where: SwapWhereInput, orderBy: [SwapOrderByInput!]): [Swap!]!
  swapByUniqueInput(where: SwapWhereUniqueInput!): Swap
  swapsConnection(first: Int, after: String, last: Int, before: String, where: SwapWhereInput, orderBy: [SwapOrderByInput!]): SwapConnection!
  hello: Hello!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}

type Swap implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  timestamp: BigInt!
  fromCurrency: String!
  toCurrency: String!
  fromAmount: BigInt!
  toAmount: BigInt!
}

type SwapConnection {
  totalCount: Int!
  edges: [SwapEdge!]!
  pageInfo: PageInfo!
}

input SwapCreateInput {
  timestamp: String!
  fromCurrency: String!
  toCurrency: String!
  fromAmount: String!
  toAmount: String!
}

type SwapEdge {
  node: Swap!
  cursor: String!
}

enum SwapOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  timestamp_ASC
  timestamp_DESC
  fromCurrency_ASC
  fromCurrency_DESC
  toCurrency_ASC
  toCurrency_DESC
  fromAmount_ASC
  fromAmount_DESC
  toAmount_ASC
  toAmount_DESC
}

input SwapUpdateInput {
  timestamp: String
  fromCurrency: String
  toCurrency: String
  fromAmount: String
  toAmount: String
}

input SwapWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  fromCurrency_eq: String
  fromCurrency_contains: String
  fromCurrency_startsWith: String
  fromCurrency_endsWith: String
  fromCurrency_in: [String!]
  toCurrency_eq: String
  toCurrency_contains: String
  toCurrency_startsWith: String
  toCurrency_endsWith: String
  toCurrency_in: [String!]
  fromAmount_eq: BigInt
  fromAmount_gt: BigInt
  fromAmount_gte: BigInt
  fromAmount_lt: BigInt
  fromAmount_lte: BigInt
  fromAmount_in: [BigInt!]
  toAmount_eq: BigInt
  toAmount_gt: BigInt
  toAmount_gte: BigInt
  toAmount_lt: BigInt
  toAmount_lte: BigInt
  toAmount_in: [BigInt!]
  AND: [SwapWhereInput!]
  OR: [SwapWhereInput!]
}

input SwapWhereUniqueInput {
  id: ID!
}
