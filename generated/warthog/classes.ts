// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

import { LiquidityChangeReason } from "../modules/liquidity-change/liquidity-change.model";

// @ts-ignore
import { LiquidityChange } from "../modules/liquidity-change/liquidity-change.model";
// @ts-ignore
import { Swap } from "../modules/swap/swap.model";

export enum LiquidityChangeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  blockNumber_ASC = "blockNumber_ASC",
  blockNumber_DESC = "blockNumber_DESC",

  eventIdx_ASC = "eventIdx_ASC",
  eventIdx_DESC = "eventIdx_DESC",

  step_ASC = "step_ASC",
  step_DESC = "step_DESC",

  reason_ASC = "reason_ASC",
  reason_DESC = "reason_DESC",

  currencyZero_ASC = "currencyZero_ASC",
  currencyZero_DESC = "currencyZero_DESC",

  currencyOne_ASC = "currencyOne_ASC",
  currencyOne_DESC = "currencyOne_DESC",

  amountZero_ASC = "amountZero_ASC",
  amountZero_DESC = "amountZero_DESC",

  amountOne_ASC = "amountOne_ASC",
  amountOne_DESC = "amountOne_DESC",

  balanceZero_ASC = "balanceZero_ASC",
  balanceZero_DESC = "balanceZero_DESC",

  balanceOne_ASC = "balanceOne_ASC",
  balanceOne_DESC = "balanceOne_DESC",
}

registerEnumType(LiquidityChangeOrderByEnum, {
  name: "LiquidityChangeOrderByInput",
});

@TypeGraphQLInputType()
export class LiquidityChangeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  blockNumber_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  eventIdx_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  step_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  step_in?: number[];

  @TypeGraphQLField(() => LiquidityChangeReason, { nullable: true })
  reason_eq?: LiquidityChangeReason;

  @TypeGraphQLField(() => [LiquidityChangeReason], { nullable: true })
  reason_in?: LiquidityChangeReason[];

  @TypeGraphQLField({ nullable: true })
  currencyZero_eq?: string;

  @TypeGraphQLField({ nullable: true })
  currencyZero_contains?: string;

  @TypeGraphQLField({ nullable: true })
  currencyZero_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  currencyZero_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  currencyZero_in?: string[];

  @TypeGraphQLField({ nullable: true })
  currencyOne_eq?: string;

  @TypeGraphQLField({ nullable: true })
  currencyOne_contains?: string;

  @TypeGraphQLField({ nullable: true })
  currencyOne_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  currencyOne_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  currencyOne_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountZero_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountZero_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountZero_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountZero_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountZero_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountZero_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOne_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOne_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOne_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOne_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOne_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountOne_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceZero_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceZero_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceZero_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceZero_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceZero_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balanceZero_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceOne_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceOne_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceOne_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceOne_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balanceOne_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balanceOne_in?: string[];

  @TypeGraphQLField(() => LiquidityChangeWhereInput, { nullable: true })
  AND?: [LiquidityChangeWhereInput];

  @TypeGraphQLField(() => LiquidityChangeWhereInput, { nullable: true })
  OR?: [LiquidityChangeWhereInput];
}

@TypeGraphQLInputType()
export class LiquidityChangeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class LiquidityChangeCreateInput {
  @TypeGraphQLField()
  timestamp!: string;

  @TypeGraphQLField()
  blockNumber!: number;

  @TypeGraphQLField()
  eventIdx!: number;

  @TypeGraphQLField()
  step!: number;

  @TypeGraphQLField(() => LiquidityChangeReason)
  reason!: LiquidityChangeReason;

  @TypeGraphQLField()
  currencyZero!: string;

  @TypeGraphQLField()
  currencyOne!: string;

  @TypeGraphQLField()
  amountZero!: string;

  @TypeGraphQLField()
  amountOne!: string;

  @TypeGraphQLField()
  balanceZero!: string;

  @TypeGraphQLField()
  balanceOne!: string;
}

@TypeGraphQLInputType()
export class LiquidityChangeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  timestamp?: string;

  @TypeGraphQLField({ nullable: true })
  blockNumber?: number;

  @TypeGraphQLField({ nullable: true })
  eventIdx?: number;

  @TypeGraphQLField({ nullable: true })
  step?: number;

  @TypeGraphQLField(() => LiquidityChangeReason, { nullable: true })
  reason?: LiquidityChangeReason;

  @TypeGraphQLField({ nullable: true })
  currencyZero?: string;

  @TypeGraphQLField({ nullable: true })
  currencyOne?: string;

  @TypeGraphQLField({ nullable: true })
  amountZero?: string;

  @TypeGraphQLField({ nullable: true })
  amountOne?: string;

  @TypeGraphQLField({ nullable: true })
  balanceZero?: string;

  @TypeGraphQLField({ nullable: true })
  balanceOne?: string;
}

@ArgsType()
export class LiquidityChangeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => LiquidityChangeWhereInput, { nullable: true })
  where?: LiquidityChangeWhereInput;

  @TypeGraphQLField(() => LiquidityChangeOrderByEnum, { nullable: true })
  orderBy?: LiquidityChangeOrderByEnum[];
}

@ArgsType()
export class LiquidityChangeCreateManyArgs {
  @TypeGraphQLField(() => [LiquidityChangeCreateInput])
  data!: LiquidityChangeCreateInput[];
}

@ArgsType()
export class LiquidityChangeUpdateArgs {
  @TypeGraphQLField() data!: LiquidityChangeUpdateInput;
  @TypeGraphQLField() where!: LiquidityChangeWhereUniqueInput;
}

export enum SwapOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  blockNumber_ASC = "blockNumber_ASC",
  blockNumber_DESC = "blockNumber_DESC",

  eventIdx_ASC = "eventIdx_ASC",
  eventIdx_DESC = "eventIdx_DESC",

  step_ASC = "step_ASC",
  step_DESC = "step_DESC",

  fromCurrency_ASC = "fromCurrency_ASC",
  fromCurrency_DESC = "fromCurrency_DESC",

  toCurrency_ASC = "toCurrency_ASC",
  toCurrency_DESC = "toCurrency_DESC",

  fromAmount_ASC = "fromAmount_ASC",
  fromAmount_DESC = "fromAmount_DESC",

  toAmount_ASC = "toAmount_ASC",
  toAmount_DESC = "toAmount_DESC",
}

registerEnumType(SwapOrderByEnum, {
  name: "SwapOrderByInput",
});

@TypeGraphQLInputType()
export class SwapWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  blockNumber_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  eventIdx_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  eventIdx_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  step_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  step_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  step_in?: number[];

  @TypeGraphQLField({ nullable: true })
  fromCurrency_eq?: string;

  @TypeGraphQLField({ nullable: true })
  fromCurrency_contains?: string;

  @TypeGraphQLField({ nullable: true })
  fromCurrency_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  fromCurrency_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  fromCurrency_in?: string[];

  @TypeGraphQLField({ nullable: true })
  toCurrency_eq?: string;

  @TypeGraphQLField({ nullable: true })
  toCurrency_contains?: string;

  @TypeGraphQLField({ nullable: true })
  toCurrency_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  toCurrency_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  toCurrency_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  fromAmount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  fromAmount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  fromAmount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  fromAmount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  fromAmount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  fromAmount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  toAmount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  toAmount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  toAmount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  toAmount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  toAmount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  toAmount_in?: string[];

  @TypeGraphQLField(() => SwapWhereInput, { nullable: true })
  AND?: [SwapWhereInput];

  @TypeGraphQLField(() => SwapWhereInput, { nullable: true })
  OR?: [SwapWhereInput];
}

@TypeGraphQLInputType()
export class SwapWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SwapCreateInput {
  @TypeGraphQLField()
  timestamp!: string;

  @TypeGraphQLField()
  blockNumber!: number;

  @TypeGraphQLField()
  eventIdx!: number;

  @TypeGraphQLField()
  step!: number;

  @TypeGraphQLField()
  fromCurrency!: string;

  @TypeGraphQLField()
  toCurrency!: string;

  @TypeGraphQLField()
  fromAmount!: string;

  @TypeGraphQLField()
  toAmount!: string;
}

@TypeGraphQLInputType()
export class SwapUpdateInput {
  @TypeGraphQLField({ nullable: true })
  timestamp?: string;

  @TypeGraphQLField({ nullable: true })
  blockNumber?: number;

  @TypeGraphQLField({ nullable: true })
  eventIdx?: number;

  @TypeGraphQLField({ nullable: true })
  step?: number;

  @TypeGraphQLField({ nullable: true })
  fromCurrency?: string;

  @TypeGraphQLField({ nullable: true })
  toCurrency?: string;

  @TypeGraphQLField({ nullable: true })
  fromAmount?: string;

  @TypeGraphQLField({ nullable: true })
  toAmount?: string;
}

@ArgsType()
export class SwapWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SwapWhereInput, { nullable: true })
  where?: SwapWhereInput;

  @TypeGraphQLField(() => SwapOrderByEnum, { nullable: true })
  orderBy?: SwapOrderByEnum[];
}

@ArgsType()
export class SwapCreateManyArgs {
  @TypeGraphQLField(() => [SwapCreateInput])
  data!: SwapCreateInput[];
}

@ArgsType()
export class SwapUpdateArgs {
  @TypeGraphQLField() data!: SwapUpdateInput;
  @TypeGraphQLField() where!: SwapWhereUniqueInput;
}
